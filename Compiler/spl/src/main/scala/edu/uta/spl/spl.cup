/********************************************************************************
*
* File: spl.cup
* The SPL parser
*
********************************************************************************/

package edu.uta.spl;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;


parser code {:

    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.FLOAT_LITERAL,
      sym.AND, sym.ARRAY, sym.BOOLEAN, sym.BY, sym.DEF, sym.DIV, sym.ELSE, sym.EQUAL, sym.EXIT, sym.FALSE,
      sym.FLOAT, sym.FOR, sym.IF, sym.INT, sym.LOOP, sym.MOD,
      sym.NOT, sym.OR, sym.PRINT, sym.READ, sym.RETURN, sym.STRING, sym.TO, sym.TYPE, sym.VAR, sym.WHILE,
      sym.PLUS, sym.MINUS, sym.TIMES, sym.TRUE,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI,
      sym.COMMA, sym.SHARP, sym.DOT, sym.LP, sym.RP, sym.LB, sym.RB, sym.LSB, sym.RSB
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "FLOAT_LITERAL",
      "AND &&", "ARRAY", "BOOLEAN", "BY", "DEF", "DIV /", "ELSE", "EQUAL", "EXIT", "FALSE",
      "FLOAT", "FOR", "IF", "INT", "LOOP", "MOD %",
      "NOT", "OR ||", "PRINT", "READ", "RETURN", "STRING", "TO", "TYPE", "VAR", "WHILE",
      "PLUS +", "MINUS -", "TIMES *", "TRUE",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ ==", "NEQ <>", "COLON :", "SEMI ;",
      "COMMA ,", "SHARP #", "DOT .", "LP (", "RP )", "LB "+'{', "RB "+'}', "LSB [", "RSB ]"
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }

:};

/* Terminals (tokens returned by the scanner). */
terminal String  ID, STRING_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Float   FLOAT_LITERAL;
terminal         AND, ARRAY, BOOLEAN, BY, DEF, DIV, ELSE, EQUAL, EXIT, FALSE,
                 FLOAT, FOR, IF, INT, LOOP, MOD,
                 NOT, OR, PRINT, READ, RETURN, STRING, TO, TYPE, VAR, WHILE,
                 PLUS, MINUS, TIMES, TRUE, LT, LEQ, GT, GEQ, EQ, NEQ, COLON, SEMI,
                 COMMA, SHARP, DOT, LP, RP, LB, RB, LSB, RSB, UMINUS;

non terminal Program 						program;
non terminal BlockSt						block;
non terminal Definition						def;
non terminal Type							type;
non terminal Lvalue							lvalue;
non terminal Expr							expr;
non terminal Stmt							stmt;
non terminal List<Definition>				deflist;
non terminal List<Stmt>						stmtlist;
non terminal List<Bind<Type>>				idtypelist;
non terminal List<Type>						typelist;
non terminal List<Expr>						exprlist;
non terminal List<Bind<Expr>>				expridlist;
non terminal List<Lvalue>					lvaluelist;
non terminal Stmt							elsestmt;

precedence nonassoc     IF,ELSE;
precedence right        OR;
precedence right        AND;
precedence nonassoc     NOT;
precedence left         EQ, LT, GT, LEQ, GEQ, NEQ;
precedence left         PLUS, MINUS, MOD;
precedence left         TIMES, DIV;
precedence left			LP, RP, LB, RB, LSB, RSB, SEMI;
precedence nonassoc 	UMINUS;

start with program;

program			::= block:b								{: SPL.setAST(new Program(b)); :}
				;
block			::= deflist:dl stmt:s SEMI stmtlist:sl	{: RESULT = new BlockSt(dl,add(s,sl)); :}
				;
deflist			::=	deflist:dl def:d SEMI 				{: RESULT = append(dl,d); :} 
				|	{: RESULT = nil; :} 
				;
stmtlist		::= stmtlist:sl stmt:s SEMI				{: RESULT = append(sl,s); :}
				|	{: RESULT = nil; :}
				;
def				::= VAR ID:id EQUAL expr:e				{: RESULT = new VarDef(id,new AnyType(),e); :}
				|	VAR ID:id COLON type:t EQUAL expr:e	{: RESULT = new VarDef(id,t,e); :}
				| 	TYPE ID:id EQUAL type:t				{: RESULT = new TypeDef(id,t); :}
				| 	DEF ID:id LP RP LB block:b RB		{: RESULT = new FuncDef(id,nil,new NoType(),b); :}
				|	DEF ID:id LP idtypelist:tl RP LB block:b RB	{: RESULT = new FuncDef(id,tl,new NoType(),b); :}
				|	DEF ID:id LP RP COLON type:t LB block:b RB	{: RESULT = new FuncDef(id,nil,t,b); :}
				|	DEF ID:id LP idtypelist:tl RP COLON type:t LB block:b RB	{: RESULT = new FuncDef(id,tl,t,b); :}
				;
idtypelist		::= idtypelist:tl COMMA ID:id COLON type:t	{: RESULT = append(tl,new Bind(id,t)); :} 
				|	ID:id COLON type:t					{: RESULT = add(new Bind(id,t),nil); :}
				;
type 			::= INT									{: RESULT = new IntType(); :}
				|	FLOAT								{: RESULT = new FloatType(); :}
				|	STRING								{: RESULT = new StringType(); :}
				|	BOOLEAN								{: RESULT = new BooleanType(); :}
				|	ID:id								{: RESULT = new NamedType(id); :}
				|	ARRAY LSB type:t RSB				{: RESULT = new ArrayType(t); :}
				|	LB idtypelist:itl RB				{: RESULT = new RecordType(itl); :}
				|	LP typelist:tl RP					{: RESULT = new TupleType(tl); :}
				|	LP RP								{: RESULT = new AnyType(); :}
				;
typelist		::= typelist:tl COMMA type:t			{: RESULT = append(tl,t); :}
				|	type:t								{: RESULT = add(t,nil); :}
				;
lvalue			::= ID:id								{: RESULT = new Var(id); :}
				|	lvalue:lv LSB expr:e RSB			{: RESULT = new ArrayDeref(new LvalExp(lv),e); :}
				|	lvalue:lv DOT ID:id					{: RESULT = new RecordDeref(new LvalExp(lv),id); :}
				|	lvalue:lv SHARP INTEGER_LITERAL:i	{: RESULT = new TupleDeref(new LvalExp(lv),i); :}
				;
expr			::= INTEGER_LITERAL:i					{: RESULT = new IntConst(i); :} 
				|	FLOAT_LITERAL:f						{: RESULT = new FloatConst(f); :}
				|	STRING_LITERAL:s					{: RESULT = new StringConst(s); :}
				|	TRUE	 							{: RESULT = new BooleanConst(true); :}
				|	FALSE								{: RESULT = new BooleanConst(false); :}
				|	lvalue:lv							{: RESULT = new LvalExp(lv); :}
				|	NOT expr:e							{: RESULT = new UnOpExp("not",e); :}
				|	MINUS expr:e						{: RESULT = new UnOpExp("minus",e); :}
				|	ARRAY LP expr:e1 COMMA expr:e2 RP	{: RESULT = new ArrayGen(e1,e2); :} 
				|	expr:el PLUS expr:er				{: RESULT = new BinOpExp("plus",el,er); :}
				|	expr:el MINUS expr:er				{: RESULT = new BinOpExp("minus",el,er); :}
				|	expr:el TIMES expr:er				{: RESULT = new BinOpExp("times",el,er); :}
				|	expr:el DIV expr:er					{: RESULT = new BinOpExp("div",el,er); :}
				|	expr:el MOD expr:er					{: RESULT = new BinOpExp("mod",el,er); :}
				|	expr:el AND expr:er					{: RESULT = new BinOpExp("and",el,er); :}
				|	expr:el OR expr:er					{: RESULT = new BinOpExp("or",el,er); :}
				|	expr:el EQ expr:er					{: RESULT = new BinOpExp("eq",el,er); :}
				|	expr:el NEQ expr:er					{: RESULT = new BinOpExp("neq",el,er); :}
				|	expr:el LT expr:er					{: RESULT = new BinOpExp("lt",el,er); :}
				|	expr:el LEQ expr:er					{: RESULT = new BinOpExp("leq",el,er); :}
				|	expr:el GT expr:er					{: RESULT = new BinOpExp("gt",el,er); :}
				|	expr:el GEQ expr:er					{: RESULT = new BinOpExp("geq",el,er); :}
				|	ID:id LP exprlist:expl RP 			{: RESULT = new CallExp(id,expl); :}
				|	ID:id LP RP							{: RESULT = new CallExp(id,append(nil,new NullExp())); :}
				|	LB expridlist:eil RB 				{: RESULT = new RecordExp(eil); :}
				|	LP RP 								{: RESULT = new NullExp(); :}
				|	LP exprlist:expl RP 				{: RESULT = new TupleExp(expl); :}
				|	LSB exprlist:expl RSB 				{: RESULT = new ArrayExp(expl); :}
				;
expridlist		::= expridlist:eil COMMA ID:id EQUAL expr:e {: RESULT = append(eil,new Bind(id,e)); :}
				|	ID:id EQUAL expr:e					{: RESULT = add(new Bind(id,e),nil); :}
				;
exprlist		::= exprlist:el COMMA expr:e			{: RESULT = append(el,e); :}
				|	expr:e								{: RESULT = add(e,nil); :}
				;
stmt			::= lvalue:lv EQUAL expr:e				{: RESULT = new AssignSt(lv,e); :}
				|	ID:id LP exprlist:el RP				{: RESULT = new CallSt(id,el); :}
				|	ID:id LP RP							{: RESULT = new CallSt(id,nil); :}
				|	LB block:b RB						{: RESULT = b; :}
				|	READ LP lvaluelist:ll RP			{: RESULT = new ReadSt(ll); :}
				|	PRINT LP RP							{: RESULT = new PrintSt(nil); :}
				|	PRINT LP exprlist:el RP				{: RESULT = new PrintSt(el); :}
				|	IF LP expr:e RP stmt:sif elsestmt:sel			{: RESULT = new IfSt(e,sif,sel); :}
				|	FOR LP ID:id EQUAL expr:e1 TO expr:e2 RP stmt:s	{: RESULT = new ForSt(id,e1,e2,new IntConst(1),s); :}
				|	FOR LP ID:id EQUAL expr:e1 TO expr:e2 BY expr:e3 RP stmt:s	{: RESULT = new ForSt(id,e1,e2,e3,s); :}
				|	WHILE LP expr:e RP stmt:s			{: RESULT = new WhileSt(e,s); :}
				|	LOOP stmt:s							{: RESULT = new LoopSt(s); :}
				|	EXIT								{: RESULT = new ExitSt(); :}
				|	RETURN 								{: RESULT = new ReturnSt(); :}
				|	RETURN expr:e						{: RESULT = new ReturnValueSt(e); :}
				;
lvaluelist		::= lvaluelist COMMA lvalue 
				|	lvalue
				;
elsestmt		::= ELSE stmt:s							{: RESULT = s; :}
				|	{: RESULT = null; :}
				;